CCS PCM C Compiler, Version 3.185, 22500

               Filename: C:\Users\Fukaken\Dropbox\FUKAKEN\回路\software\TPIP通信TPIPがわ\rs232c ccs.LST

               ROM used: 166 (2%)
                         Largest free fragment is 2048
               RAM used: 16 (9%) at main() level
                         17 (10%) worst case
               Stack:    1 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
....................  /////////////////////////////////////////////////  
.................... //　This program is test program of standard io.  
.................... //　PIC16F84 is target PIC and drive a LCD.  
.................... //　The PORT for RS232 is below.  
.................... //　　送信=RA3　受信=RA4  
.................... /////////////////////////////////////////////////  
.................... //ヘッダファイルの読み込み  
.................... #include <16f877a.h>		//16F873のヘッダファイル 
....................  //////// Standard Header file for the PIC16F877A device ////////////////  
.................... #device PIC16F877A ADC=10  
.................... #list  
....................  
.................... #include <stdio.h>			//標準入出力のヘッダファイル 
....................  ///////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           ////  
.................... //// This source code may only be used by licensed users of the CCS C  ////  
.................... //// compiler.  This source code may only be distributed to other      ////  
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////  
.................... //// or distribution is permitted without written permission.          ////  
.................... //// Derivative programs created using this software in object code    ////  
.................... //// form are not restricted in any way.                               ////  
.................... ///////////////////////////////////////////////////////////////////////////  
....................   
.................... #ifndef _STDIO  
.................... #define _STDIO  
.................... #include <string.h> 
....................  ////////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            ////  
.................... //// This source code may only be used by licensed users of the CCS C   ////  
.................... //// compiler.  This source code may only be distributed to other       ////  
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////  
.................... //// or distribution is permitted without written permission.           ////  
.................... //// Derivative programs created using this software in object code     ////  
.................... //// form are not restricted in any way.                                ////  
.................... ////////////////////////////////////////////////////////////////////////////  
....................   
.................... #ifndef _STRING  
.................... #define _STRING  
.................... #include <stddef.h> 
....................  ///////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           ////  
.................... //// This source code may only be used by licensed users of the CCS C  ////  
.................... //// compiler.  This source code may only be distributed to other      ////  
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////  
.................... //// or distribution is permitted without written permission.          ////  
.................... //// Derivative programs created using this software in object code    ////  
.................... //// form are not restricted in any way.                               ////  
.................... ///////////////////////////////////////////////////////////////////////////  
....................   
.................... #ifndef _STDDEF  
....................   
.................... #define _STDDEF  
....................   
.................... #if sizeof(int *)==1  
.................... #define ptrdiff_t int  
.................... #else  
.................... #define ptrdiff_t long  
.................... #endif  
....................   
.................... #define size_t int  
.................... #define wchar_t char  
.................... #define NULL 0  
....................   
.................... #define offsetof(s,f) (offsetofbit(s,f)/8)  
....................   
.................... #endif  
....................  
.................... #include <ctype.h> 
....................  ////////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            ////  
.................... //// This source code may only be used by licensed users of the CCS C   ////  
.................... //// compiler.  This source code may only be distributed to other       ////  
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////  
.................... //// or distribution is permitted without written permission.           ////  
.................... //// Derivative programs created using this software in object code     ////  
.................... //// form are not restricted in any way.                                ////  
.................... ////////////////////////////////////////////////////////////////////////////  
....................   
.................... #ifndef _CTYPE  
.................... #define _CTYPE  
....................   
.................... #define islower(x)  isamoung(x,"abcdefghijklmnopqrstuvwxyz")  
.................... #define isupper(x)  isamoung(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")  
.................... #define isalnum(x)  isamoung(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")  
.................... #define isalpha(x)  isamoung(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")  
.................... #define isdigit(x)  isamoung(x,"0123456789")  
.................... #define isspace(x)  (x==' ')  
.................... #define isxdigit(x) isamoung(x,"0123456789ABCDEFabcdef")  
.................... #define iscntrl(x)  (x<' ')  
.................... #define isprint(x)  (x>=' ')  
.................... #define isgraph(x)  (x>' ')  
.................... #define ispunct(x)  ((x>' ')&&!isalnum(x))  
....................   
.................... #endif  
....................   
....................  
....................   
....................   
....................   
.................... //////////////////////////////////////////////  
.................... //// Uncomment the following define to    ////  
.................... //// allow some functions to use a        ////  
.................... //// quicker algorithm, but use more ROM  ////  
.................... ////                                      ////  
.................... //// #define FASTER_BUT_MORE_ROM          ////  
.................... //////////////////////////////////////////////  
....................   
....................   
....................   
.................... /*Copying functions*/  
.................... /* standard template:  
....................    void *memmove(void *s1, void *s2, size_t n).  
....................    Copies max of n characters safely (not following ending '\0')  
....................    from s2 in s1; if s2 has less than n characters, appends 0 */  
....................   
.................... char *memmove(void *s1,char *s2,size_t n)  
.................... {  
....................    char *sc1;  
....................    char *sc2;  
....................    sc1=s1;  
....................    sc2=s2;  
....................    if(sc2<sc1 && sc1 <sc2 +n)  
....................       for(sc1+=n,sc2+=n;0<n;--n)  
....................          *--sc1=*--sc2;  
....................    else  
....................       for(;0<n;--n)  
....................          *sc1++=*sc2++;  
....................   return s1;  
....................   }  
.................... /*    Standard template: char *strcpy(char *s1, const char *s2)  
.................... copies the string s2 including the null character to s1*/  
....................   
.................... char *strcpy(char *s1, char *s2)  
.................... {  
....................   char *s;  
....................   
....................   for (s = s1; *s2 != 0; s++, s2++)  
.................... 	  *s = *s2;  
....................   return(s1);  
.................... }  
.................... /* compiler ignored the name 'strcpy()'; perhaps, it's reserved?? 
....................    Standard template: char *strcpy(char *s1, const char *s2)  
....................    copies the string s2 including the null character to s1*/  
....................   
.................... char *strcopy(char *s1, char *s2)  
.................... {  
....................   char *s;  
....................   
....................   for (s = s1; *s2 != 0; s++, s2++)  
.................... 	  *s = *s2;  
....................   return(s1);  
.................... }  
....................   
.................... /* standard template:  
....................    char *strncpy(char *s1, const char *s2, size_t n).  
....................    Copies max of n characters (not following ending '\0')  
....................    from s2 in s1; if s2 has less than n characters, appends 0 */  
....................   
.................... char *strncpy(char *s1, char *s2, size_t n)  
.................... {  
....................   char *s;  
....................   
....................   for (s = s1; n > 0 && *s2 != '\0'; n--)  
....................      *s++ = *s2++;  
....................   for (; n > 0; n--)  
....................      *s++ = '\0';  
....................   
....................   return(s1);  
.................... }  
.................... /***********************************************************/  
....................   
.................... /*concatenation functions*/  
.................... /* standard template: char *strcat(char *s1, const char *s2)  
.................... appends s2 to s1*/  
....................   
.................... char *strcat(char *s1, char *s2)  
.................... {  
....................    char *s;  
....................   
....................    for (s = s1; *s != '\0'; ++s);  
....................    while(*s2 != '\0')  
....................    {  
....................       *s = *s2;  
....................       ++s;  
....................       ++s2;  
....................    }  
....................   
....................    *s = '\0';  
....................    return(s1);  
.................... }  
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n)  
.................... appends not more than n characters from s2 to s1*/  
....................   
.................... char *strncat(char *s1, char *s2, size_t n)  
.................... {  
....................    char *s;  
....................   
....................    for (s = s1; *s != '\0'; ++s);  
....................    while(*s2 != '\0' && 0<n)  
....................    {  
....................       *s = *s2;  
....................       ++s;  
....................       ++s2;  
....................       --n;  
....................    }  
....................   
....................    *s = '\0';  
....................    return(s1);  
.................... }  
....................   
.................... /***********************************************************/  
....................   
.................... /*comparison functions*/  
.................... /* standard template: signed int memcmp(void *s1, void *s2).  
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */  
....................   
.................... signed int memcmp(void * s1,char *s2,size_t n)  
.................... {  
.................... char *su1, su2;  
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n)  
.................... {  
....................    if(*su1!=*su2)  
....................       return ((*su1<*su2)??1:+1);  
.................... }  
.................... return 0;  
.................... }  
.................... /* standard template: int strcmp(const char *s1, const char *s2).  
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */  
....................   
.................... signed int strcmp(char *s1, char *s2)  
.................... {  
....................    for (; *s1 == *s2; s1++, s2++)  
....................       if (*s1 == '\0')  
....................          return(0);  
....................    return((*s1 < *s2) ??-1: 1);  
.................... }  
.................... /* standard template: int strcoll(const char *s1, const char *s2).  
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */  
....................   
.................... signed int strcoll(char *s1, char *s2)  
.................... {  
....................    for (; *s1 == *s2; s1++, s2++)  
....................       if (*s1 == '\0')  
....................          return(0);  
....................    return((*s1 < *s2) ??-1: 1);  
.................... }  
....................   
.................... /* standard template:  
....................    int strncmp(const char *s1, const char *s2, size_t n).  
....................    Compares max of n characters (not following 0) from s1 to s2;  
....................    returns same as strcmp */  
....................   
.................... signed int strncmp(char *s1, char *s2, size_t n)  
.................... {  
....................    for (; n > 0; s1++, s2++, n--)  
....................       if (*s1 != *s2)  
....................          return((*s1 <*s2) ??-1: 1);  
....................       else if (*s1 == '\0')  
....................          return(0);  
....................    return(0);  
.................... }  
.................... /* standard template:  
....................    int strxfrm(const char *s1, const char *s2, size_t n).  
....................    transforms maximum of n characters from s2 and places them into s1*/  
.................... size_t strxfrm(char *s1, char *s2, size_t n)  
.................... {  
....................   char *s;  
....................   int n1;  
....................   n1=n;  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--)  
....................      *s++ = *s2++;  
....................   for (; n > 0; n--)  
....................      *s++ = '\0';  
....................   
....................   return(n1);  
.................... }  
....................   
....................   
....................   
....................   
....................   
.................... /***********************************************************/  
.................... /*Search functions*/  
.................... /* standard template: void *memchr(const char *s, int c).  
....................    Finds first occurrence of c in n characters of s */  
....................   
.................... char *memchr(void *s,int c,size_t n)  
.................... {  
....................    char uc;  
....................    char *su;  
....................    uc=c;  
....................    for(su=s;0<n;++su,--n)  
....................       if(*su==uc)  
....................       return su;  
....................    return NULL;  
.................... }  
....................   
.................... /* standard template: char *strchr(const char *s, int c).  
....................    Finds first occurrence of c in s */  
....................   
.................... char *strchr(char *s, int c)  
.................... {  
....................    for (; *s != c; s++)  
....................       if (*s == '\0')  
....................          return(0);  
....................    return(s);  
.................... }  
.................... /* standard template:  
....................    size_t strcspn(const char *s1, const char *s2).  
....................    Computes length of max initial segment of s1 that  
....................    consists entirely of characters NOT from s2*/  
....................   
.................... int *strcspn(char *s1, char *s2)  
.................... {  
....................    char *sc1, *sc2;  
....................   
....................    for (sc1 = s1; *sc1 != 0; sc1++)  
....................       for (sc2 = s2; *sc2 != 0; sc2++)  
....................          if (*sc1 == *sc2)  
....................             return(sc1 - s1);  
....................    return(sc1 - s1);  
.................... }  
.................... /* standard template:  
....................    char *strpbrk(const char *s1, const char *s2).  
....................    Locates first occurence of any character from s2 in s1;  
....................    returns s1 if s2 is empty string */  
....................   
.................... char *strpbrk(char *s1, char *s2)  
.................... {  
....................    char *sc1, *sc2;  
....................   
....................    for (sc1 = s1; *sc1 != 0; sc1++)  
....................       for (sc2 = s2; *sc2 != 0; sc2++)  
....................          if (*sc1 == *sc2)  
....................             return(sc1);  
....................    return(0);  
.................... }  
....................   
....................   
.................... /* standard template: char *strrchr(const char *s, int c).  
....................    Finds last occurrence of c in s */  
....................   
.................... char *strrchr(char *s, int c)  
.................... {  
....................    char *p;  
....................   
....................    for (p = 0; ; s++)  
....................    {  
....................       if (*s == c)  
....................          p = s;  
....................       if (*s == '\0')  
....................          return(p);  
....................    }  
.................... }  
.................... /* computes length of max initial segment of s1 consisting  
....................    entirely of characters from s2 */  
....................   
.................... int *strspn(char *s1, char *s2)  
.................... {  
....................    char *sc1, *sc2;  
....................   
....................    for (sc1 = s1; *sc1 != 0; sc1++)  
....................       for (sc2 = s2; ; sc2++)  
.................... 	 if (*sc2 == '\0')  
.................... 	    return(sc1 - s1);  
....................          else if (*sc1 == *sc2)  
....................             break;  
....................    return(sc1 - s1);  
.................... }  
.................... /* standard template:  
....................    char *strstr(const char *s1, const char *s2);  
....................    Locates first occurence of character sequence s2 in s1;  
....................    returns 0 if s2 is empty string  
....................   
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the  
....................    file to use the faster algorithm */  
.................... char *strstr(char *s1, char *s2)  
.................... {  
.................... 	char *s, *t;  
....................   
....................    #ifdef FASTER_BUT_MORE_ROM  
....................    if (*s2 == '\0')  
....................          return(s1);  
....................    #endif  
....................   
.................... 	while (*s1)  
....................    {  
....................       for(s = s1, t = s2; *t && *s == *t; ++s, ++t);  
....................   
.................... 		if (*t == '\0')  
.................... 			return s1;  
....................       ++s1;  
....................       #ifdef FASTER_BUT_MORE_ROM  
....................          while(*s1 != '\0' && *s1 != *s2)  
....................             ++s1;  
....................       #endif  
.................... 	}  
.................... 	return 0;  
.................... }  
....................   
.................... /* standard template: char *strtok(char *s1, const char *s2).  
....................   
....................    Finds next token in s1 delimited by a character from separator  
....................    string s2 (which can be different from call to call).  First call  
....................    starts at beginning of s1 searching for first character NOT  
....................    contained in s2; returns 0 if none is found.  
....................    If one is found, it is the start of first token (return value).  
....................    Function then searches from there for a character contained in s2.  
....................    If none is found, current token extends to end of s1, and subsequent  
....................    searches for a token will return 0.  If one is found, it is  
....................    overwritten by '\0', which terminates current token.  Function saves  
....................    pointer to following character from which next search will start.  
....................    Each subsequent call, with 0 as first argument, starts searching  
....................    from saved pointer */  
....................   
.................... char *strtok(char *s1, char *s2)  
.................... {  
....................    char *beg, *end;  
....................    static char *save;  
*
0022:  CLRF   20
0023:  MOVLW  81
0024:  BSF    03.5
0025:  MOVWF  19
0026:  MOVLW  26
0027:  MOVWF  18
0028:  MOVLW  90
0029:  BCF    03.5
002A:  MOVWF  18
....................   
....................    beg = (s1)??s1: save;  
....................    beg += strspn(beg, s2);  
....................    if (*beg == '\0')  
....................    {  
....................       *save = ' ';  
....................       return(0);  
....................    }  
....................    end = strpbrk(beg, s2);  
....................    if (*end != '\0')  
....................    {  
....................       *end = '\0';  
....................       end++;  
....................    }  
....................    save = end;  
....................    return(beg);  
.................... }  
....................   
.................... /*****************************************************************/  
.................... /*Miscellaneous functions*/  
.................... /* standard template  
.................... maps error number in errnum to an error message string  
.................... Returns: Pointer to string  
.................... */  
.................... #ifdef _ERRNO  
.................... char * strerror(int errnum)  
.................... {  
.................... char s[15];  
.................... switch( errnum)  
.................... {  
.................... case 0:  
....................    strcpy(s,"no errors");  
....................    return s;  
.................... case EDOM :  
....................    strcpy(s,"domain error");  
....................    return s;  
.................... case ERANGE:  
....................    strcpy(s,"range error");  
....................    return s;  
.................... }  
.................... }  
.................... #ENDIF  
.................... /* standard template: size_t strlen(const char *s).  
....................    Computes length of s1 (preceding terminating 0) */  
....................   
.................... int *strlen(char *s)  
.................... {  
....................    char *sc;  
....................   
....................    for (sc = s; *sc != 0; sc++);  
....................    return(sc - s);  
.................... }  
....................   
.................... /* standard template: size_t stricmp(const char *s1, const char *s2).  
....................    Compares s1 to s2 ignoring case (upper vs. lower) */  
....................   
.................... signed int stricmp(char *s1, char *s2)  
.................... {  
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32));  
....................     s1++, s2++)  
....................     if (*s1 == '\0')  
....................        return(0);  
....................  return((*s1 < *s2) ??-1: 1);  
.................... }  
....................   
....................   
.................... /* standard template: char *strlwr(char *s).  
....................    Replaces uppercase letters by lowercase;  
....................    returns pointer to new string s */  
....................   
.................... char *strlwr(char *s)  
.................... {  
....................    char *p;  
....................   
....................    for (p = s; *p != '\0'; p++)  
....................       if (*p >= 'A' && *p <='Z')  
....................          *p += 'a' - 'A';  
....................    return(s);  
.................... }  
....................   
....................   
.................... /************************************************************/  
....................   
....................   
.................... #endif  
....................  
.................... #ifndef getc  
.................... #define getc getch  
.................... #define getchar getch  
.................... #define puts(s) {printf(s); putchar(13); putchar(10);}  
.................... #define putc putchar  
.................... #endif  
.................... /* maps error number to an error message. Writes a sequence of characters to  
.................... stderr stream thus: if s is not null then string pointed to by s follwed by  
.................... a colon (:) and a space and the appropriate error message returned by strerror  
.................... function with argument errno  
....................   
.................... Returns: no value  
.................... */  
....................   
.................... #ifdef _ERRNO  
.................... void perror(char *s)  
.................... {  
....................   if(s)  
....................   fprintf(STDERR,"%s: ",s);  
....................   fprintf(STDERR,"%s\r\n",strerror(errno));  
.................... }  
.................... #endif  
.................... #endif  
....................  
....................   
.................... // 入出力ピンの設定  
.................... #define TRIS_A	0x00		//ALL,OUT  
.................... #define TRIS_B	0x00		//ALL,OUT  
.................... #define TRIS_C	0x80		//PIN_C7:IN  
.................... #define TRIS_D	0x00		//ALL,OUT  
.................... #define TRIS_E	0x00		//ALL,OUT  
....................   
.................... //ピンのdefine  
.................... #define RUN_LED PIN_C3  
....................   
.................... //RS232Cの設定コマンド  
.................... #define RS_BAUD		9600	//Baud-Reatは9600bps  
.................... #define RS_TX		PIN_C6	//TXピンはPIN_C6  
.................... #define RS_RX		PIN_C7	//RXピンはPIN_C7  
....................   
....................   
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP,PUT,NOBROWNOUT  
.................... //詳細は一番下のメモ書きにて  
....................   
....................   
.................... //クロック速度の指定（20MHz)  
.................... #use delay(clock = 20000000)  
*
0004:  MOVLW  2B
0005:  MOVWF  04
0006:  MOVF   00,W
0007:  BTFSC  03.2
0008:  GOTO   016
0009:  MOVLW  06
000A:  MOVWF  78
000B:  CLRF   77
000C:  DECFSZ 77,F
000D:  GOTO   00C
000E:  DECFSZ 78,F
000F:  GOTO   00B
0010:  MOVLW  7B
0011:  MOVWF  77
0012:  DECFSZ 77,F
0013:  GOTO   012
0014:  DECFSZ 00,F
0015:  GOTO   009
0016:  BCF    0A.3
0017:  BCF    0A.4
0018:  GOTO   056 (RETURN)
....................   
.................... //RS232Cの設定  
.................... #use rs232(BAUD = RS_BAUD , XMIT = RS_TX, RCV = RS_RX)  
....................   
.................... //初期設定  
.................... #byte port_a = 5  
.................... #byte port_b = 6  
.................... #byte port_c = 7  
.................... #byte port_d = 8  
.................... #byte port_e = 9  
....................   
.................... //ここからmain関数  
.................... main()  
.................... {  
0019:  CLRF   04
001A:  MOVLW  1F
001B:  ANDWF  03,F
001C:  MOVLW  06
001D:  BSF    03.5
001E:  MOVWF  1F
001F:  MOVLW  07
0020:  BCF    03.5
0021:  MOVWF  1F
.................... 	//変数定義  
.................... 	int cmnd =0;   
*
002D:  CLRF   22
.................... 	char data[7];  
.................... 	  
.................... 		//初期化  
.................... 		set_tris_a(TRIS_A);  
002E:  MOVLW  00
002F:  BSF    03.5
0030:  MOVWF  05
.................... 		set_tris_b(TRIS_B);  
0031:  MOVWF  06
.................... 		set_tris_c(TRIS_C);  
*
002B:  MOVLW  FF
002C:  MOVWF  21
*
0032:  MOVLW  80
0033:  MOVWF  07
0034:  BCF    03.5
0035:  MOVWF  21
.................... 		set_tris_d(TRIS_D);  
0036:  MOVLW  00
0037:  BSF    03.5
0038:  MOVWF  08
.................... 		set_tris_e(TRIS_E);  
0039:  BCF    09.0
003A:  BCF    09.1
003B:  BCF    09.2
.................... 		  
.................... 		port_a = 0;  
003C:  BCF    03.5
003D:  CLRF   05
.................... 		port_b = 0;  
003E:  CLRF   06
.................... 		//port_c = 0;  
.................... 		port_d = 0;  
003F:  CLRF   08
.................... 		port_e = 0;  
0040:  CLRF   09
.................... 	  
.................... 	//２バイトデータのとき  
.................... 	data[0] = '@';  
0041:  MOVLW  40
0042:  MOVWF  23
.................... 	data[1] = 0x02;  
0043:  MOVLW  02
0044:  MOVWF  24
.................... 	data[2] = 0x09;  
0045:  MOVLW  09
0046:  MOVWF  25
.................... 	data[3] = 0x04;  
0047:  MOVLW  04
0048:  MOVWF  26
.................... 	data[4] = 0x11;  
0049:  MOVLW  11
004A:  MOVWF  27
.................... 	data[5] = 0x04;  
004B:  MOVLW  04
004C:  MOVWF  28
.................... 	data[6] = '*';  
004D:  MOVLW  2A
004E:  MOVWF  29
.................... 	  
.................... 	  
.................... 	  
.................... 		while(1) {					//永久繰り返し  
.................... 			  
.................... 			  
.................... 			/*		２バイトデータ  
.................... 			delay_ms(1000);  
.................... 			putc(data[0]);  
.................... 			putc(data[1]);  
.................... 			putc(data[2]);  
.................... 			putc(data[3]);  
.................... 			putc(data[4]);  
.................... 			putc(data[5]);  
.................... 			putc(data[6]);  
.................... 			*/  
.................... 		  
.................... 			  
.................... 			/*  
.................... 			//１バイトデータのとき  
.................... 			delay_ms(1000);  
.................... 			putc(data[0]);  
.................... 			putc(data[1]);  
.................... 			putc(data[2]);  
.................... 			putc(data[3]);  
.................... 			putc(data[6]);  
.................... 			  
.................... 			*/  
.................... 			  
.................... 			data[1] = 0x08;  
004F:  MOVLW  08
0050:  MOVWF  24
.................... 			  
.................... 			//		8バイトデータ  
.................... 			delay_ms(500);  
0051:  MOVLW  02
0052:  MOVWF  2A
0053:  MOVLW  FA
0054:  MOVWF  2B
0055:  GOTO   004
0056:  DECFSZ 2A,F
0057:  GOTO   053
.................... 			putc(data[0]);  
0058:  MOVF   23,W
0059:  BTFSS  0C.4
005A:  GOTO   059
005B:  MOVWF  19
.................... 			putc(data[1]);  
005C:  MOVF   24,W
005D:  BTFSS  0C.4
005E:  GOTO   05D
005F:  MOVWF  19
.................... 			putc(data[2]);  
0060:  MOVF   25,W
0061:  BTFSS  0C.4
0062:  GOTO   061
0063:  MOVWF  19
.................... 			putc(data[3]);  
0064:  MOVF   26,W
0065:  BTFSS  0C.4
0066:  GOTO   065
0067:  MOVWF  19
.................... 			putc(data[4]);  
0068:  MOVF   27,W
0069:  BTFSS  0C.4
006A:  GOTO   069
006B:  MOVWF  19
.................... 			putc(data[5]);  
006C:  MOVF   28,W
006D:  BTFSS  0C.4
006E:  GOTO   06D
006F:  MOVWF  19
.................... 			putc(data[2]);  
0070:  MOVF   25,W
0071:  BTFSS  0C.4
0072:  GOTO   071
0073:  MOVWF  19
.................... 			putc(data[3]);  
0074:  MOVF   26,W
0075:  BTFSS  0C.4
0076:  GOTO   075
0077:  MOVWF  19
.................... 			putc(data[4]);  
0078:  MOVF   27,W
0079:  BTFSS  0C.4
007A:  GOTO   079
007B:  MOVWF  19
.................... 			putc(data[5]);  
007C:  MOVF   28,W
007D:  BTFSS  0C.4
007E:  GOTO   07D
007F:  MOVWF  19
.................... 			putc(data[2]);  
0080:  MOVF   25,W
0081:  BTFSS  0C.4
0082:  GOTO   081
0083:  MOVWF  19
.................... 			putc(data[3]);  
0084:  MOVF   26,W
0085:  BTFSS  0C.4
0086:  GOTO   085
0087:  MOVWF  19
.................... 			putc(data[4]);  
0088:  MOVF   27,W
0089:  BTFSS  0C.4
008A:  GOTO   089
008B:  MOVWF  19
.................... 			putc(data[5]);  
008C:  MOVF   28,W
008D:  BTFSS  0C.4
008E:  GOTO   08D
008F:  MOVWF  19
.................... 			putc(data[2]);  
0090:  MOVF   25,W
0091:  BTFSS  0C.4
0092:  GOTO   091
0093:  MOVWF  19
.................... 			putc(data[3]);  
0094:  MOVF   26,W
0095:  BTFSS  0C.4
0096:  GOTO   095
0097:  MOVWF  19
.................... 			putc(data[4]);  
0098:  MOVF   27,W
0099:  BTFSS  0C.4
009A:  GOTO   099
009B:  MOVWF  19
.................... 			putc(data[5]);  
009C:  MOVF   28,W
009D:  BTFSS  0C.4
009E:  GOTO   09D
009F:  MOVWF  19
.................... 			putc(data[6]);  
00A0:  MOVF   29,W
00A1:  BTFSS  0C.4
00A2:  GOTO   0A1
00A3:  MOVWF  19
.................... 			  
.................... 			  
....................  }  
00A4:  GOTO   04F
.................... }   
....................  
00A5:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
