CCS PCM C Compiler, Version 3.185, 22500

               Filename: C:\Users\Fukaken\Dropbox\FUKAKEN\回路\software\TPIP通信 0520_Debug\part2\TPIP.LST

               ROM used: 823 (10%)
                         Largest free fragment is 2048
               RAM used: 38 (22%) at main() level
                         40 (23%) worst case
               Stack:    2 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   057
0003:  NOP
....................  #include<16f877a.h> 
....................  //////// Standard Header file for the PIC16F877A device ////////////////  
.................... #device PIC16F877A ADC=10  
.................... #list  
....................  
.................... //#include<stdio.h>  
....................   
.................... //#define RS_BAUD		115200  
.................... #define RS_BAUD		9600  
.................... #define RS_TX		PIN_C6  
.................... #define RS_RX		PIN_C7  
.................... #define RUN_LED		PIN_C0  
.................... //ぴんマクロ  
.................... /*  
.................... //鉄火巻きモーターI/O  
.................... 	#define	TEKKA_Mortor1_IO_R	PIN_A2  
.................... 	#define	TEKKA_Mortor1_IO_L	PIN_A4  
.................... 	#define	TEKKA_LED			PIN_E1  
.................... 	#define	TEKKA_NOPIN			PIN_E0  
.................... 	#define	TEKKA_Mortor2_IO_R	PIN_A3  
.................... 	#define	TEKKA_Mortor2_IO_L	PIN_A5  
.................... 	*/  
.................... 	//モーターPWM  
.................... 	#define	TEKKA_Mortor1_PWM	PIN_C1  
.................... 	#define	TEKKA_Mortor2_PWM	PIN_C2  
.................... 	//かっぱ巻きモーターI/O  
.................... 	#define	KAPPA_LED1			PIN_D5	  
.................... 	#define	KAPPA_LED2			PIN_D4	  
.................... 	#define	KAPPA_Mortor1_IO_R	PIN_D0	  
.................... 	#define	KAPPA_Mortor1_IO_L	PIN_C3  
.................... 	#define	KAPPA_Mortor2_IO_R	PIN_D2	  
.................... 	#define	KAPPA_Mortor2_IO_L	PIN_D3	  
.................... 	#define	KAPPA_Mortor3_IO_R	PIN_C4	  
.................... 	#define	KAPPA_Mortor3_IO_L	PIN_C5	  
.................... 	#define	KAPPA_Mortor4_IO_R	PIN_D1	  
.................... 	#define	KAPPA_Mortor4_IO_L	PIN_A0	  
.................... 	//かっぱ巻きモーター2I/O  
.................... 	#define	KAPPA2_LED1			PIN_B6	  
.................... 	#define	KAPPA2_LED2			PIN_B7	  
.................... 	#define	KAPPA2_Mortor1_IO_R	PIN_D6  
.................... 	#define	KAPPA2_Mortor1_IO_L	PIN_D7  
.................... 	#define	KAPPA2_Mortor2_IO_R	PIN_B0	  
.................... 	#define	KAPPA2_Mortor2_IO_L	PIN_B1	  
.................... 	#define	KAPPA2_Mortor3_IO_R	PIN_B2	  
.................... 	#define	KAPPA2_Mortor3_IO_L	PIN_B3	  
.................... 	#define	KAPPA2_Mortor4_IO_R	PIN_B4	  
.................... 	#define	KAPPA2_Mortor4_IO_L	PIN_B5	  
....................   
....................   
....................   
.................... #use delay(clock = 20000000)  
0017:  MOVLW  42
0018:  MOVWF  04
0019:  MOVF   00,W
001A:  BTFSC  03.2
001B:  GOTO   029
001C:  MOVLW  06
001D:  MOVWF  78
001E:  CLRF   77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  DECFSZ 78,F
0022:  GOTO   01E
0023:  MOVLW  7B
0024:  MOVWF  77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 00,F
0028:  GOTO   01C
0029:  RETLW  00
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP,PUT,NOBROWNOUT  
.................... #use rs232(BAUD = RS_BAUD , XMIT = RS_TX, RCV = RS_RX)  //rs232c設定  
....................   
....................   
.................... //関数宣言  
.................... void LED_tikatika( unsigned int16 a)  
.................... {  
.................... 	output_high(RUN_LED);   //動作確認  
002A:  BCF    20.0
002B:  MOVF   20,W
002C:  BSF    03.5
002D:  MOVWF  07
002E:  BCF    03.5
002F:  BSF    07.0
*
0068:  MOVLW  FF
0069:  MOVWF  20
.................... 	delay_ms(a);  
*
0030:  MOVF   40,W
0031:  MOVWF  42
0032:  CALL   017
.................... 	output_low(RUN_LED);   //動作確認  
0033:  BCF    20.0
0034:  MOVF   20,W
0035:  BSF    03.5
0036:  MOVWF  07
0037:  BCF    03.5
0038:  BCF    07.0
.................... 	delay_ms(a);  
0039:  MOVF   40,W
003A:  MOVWF  42
003B:  CALL   017
.................... 	output_high(RUN_LED);   //動作確認  
003C:  BCF    20.0
003D:  MOVF   20,W
003E:  BSF    03.5
003F:  MOVWF  07
0040:  BCF    03.5
0041:  BSF    07.0
.................... 	delay_ms(a);  
0042:  MOVF   40,W
0043:  MOVWF  42
0044:  CALL   017
.................... 	output_low(RUN_LED);   //動作確認  
0045:  BCF    20.0
0046:  MOVF   20,W
0047:  BSF    03.5
0048:  MOVWF  07
0049:  BCF    03.5
004A:  BCF    07.0
.................... 	delay_ms(a);  
004B:  MOVF   40,W
004C:  MOVWF  42
004D:  CALL   017
.................... 	output_high(RUN_LED);   //動作確認  
004E:  BCF    20.0
004F:  MOVF   20,W
0050:  BSF    03.5
0051:  MOVWF  07
0052:  BCF    03.5
0053:  BSF    07.0
.................... 	  
.................... 	return;	  
.................... }  
0054:  BCF    0A.3
0055:  BCF    0A.4
0056:  GOTO   0D2 (RETURN)
.................... /*  
.................... #use fast_io(a)  
.................... #use fast_io(b)  
.................... #use fast_io(c)  
.................... #use fast_io(d)  
.................... #use fast_io(e)  
.................... */  
.................... #byte port_a = 5  
.................... #byte port_b = 6  
.................... #byte port_c = 7  
.................... #byte port_d = 8  
.................... #byte port_e = 9  
.................... #byte ADCON1 = 0x9F			//アナログデジタルピン設定	  
.................... main()  
.................... {  
0057:  CLRF   04
0058:  MOVLW  1F
0059:  ANDWF  03,F
005A:  MOVLW  06
005B:  BSF    03.5
005C:  MOVWF  1F
005D:  MOVLW  07
005E:  BCF    03.5
005F:  MOVWF  1F
0060:  MOVLW  81
0061:  BSF    03.5
0062:  MOVWF  19
0063:  MOVLW  26
0064:  MOVWF  18
0065:  MOVLW  90
0066:  BCF    03.5
0067:  MOVWF  18
.................... 	//ローカル変数定義  
.................... 	char cheaker=0;	  
*
006A:  CLRF   21
.................... 	char data_H[10];  
.................... 	char data_L[10];		//受信データ格納スペース  
.................... 	int16 E=0,F=0;				  
006B:  CLRF   36
006C:  CLRF   37
006D:  CLRF   38
006E:  CLRF   39
.................... 	int ID=0,hugou=0,i=0;  
006F:  CLRF   3A
0070:  CLRF   3B
0071:  CLRF   3C
.................... 	char motasuu1=0;  
0072:  CLRF   3D
.................... 	char ggg=0;  
0073:  CLRF   3E
.................... 	int motasuu = 0;  
0074:  CLRF   3F
.................... 	//初期化  
.................... 	set_tris_a(0x01);  
0075:  MOVLW  01
0076:  BSF    03.5
0077:  MOVWF  05
.................... 	set_tris_b(0x00);  
0078:  MOVLW  00
0079:  MOVWF  06
.................... 	set_tris_c(0x80);  
007A:  MOVLW  80
007B:  MOVWF  07
007C:  BCF    03.5
007D:  MOVWF  20
.................... 	set_tris_d(0x00);  
007E:  MOVLW  00
007F:  BSF    03.5
0080:  MOVWF  08
.................... 	set_tris_e(0x00);  
0081:  BCF    09.0
0082:  BCF    09.1
0083:  BCF    09.2
.................... 	ADCON1 = 0b00000111;		//デジタルピン設定	  
0084:  MOVLW  07
0085:  MOVWF  1F
.................... 	//PWM初期化  
.................... 	/*  
.................... 	setup_ccp1(CCP_PWM);  
.................... 	setup_ccp2(CCP_PWM);  
.................... 	SETUP_TIMER_2(T2_DIV_BY_16,0xFF,1);  
.................... 	*/  
.................... 	//モーター初期化  
.................... 	//鉄火巻き初期化  
.................... 	/*  
.................... 	set_pwm1_duty(0);  
.................... 	set_pwm2_duty(0);  
.................... 	output_low(TEKKA_Mortor1_IO_L);  
.................... 	output_low(TEKKA_Mortor1_IO_R);  
.................... 	output_low(TEKKA_Mortor2_IO_L);  
.................... 	output_low(TEKKA_Mortor2_IO_R);  
.................... 	*/  
.................... 	//かっぱ巻き初期化  
.................... 	output_low(KAPPA_Mortor1_IO_L);  
0086:  BCF    03.5
0087:  BCF    20.3
0088:  MOVF   20,W
0089:  BSF    03.5
008A:  MOVWF  07
008B:  BCF    03.5
008C:  BCF    07.3
.................... 	output_low(KAPPA_Mortor1_IO_R);  
008D:  BSF    03.5
008E:  BCF    08.0
008F:  BCF    03.5
0090:  BCF    08.0
.................... 	output_low(KAPPA_Mortor2_IO_L);  
0091:  BSF    03.5
0092:  BCF    08.3
0093:  BCF    03.5
0094:  BCF    08.3
.................... 	output_low(KAPPA_Mortor2_IO_R);  
0095:  BSF    03.5
0096:  BCF    08.2
0097:  BCF    03.5
0098:  BCF    08.2
.................... 	output_low(KAPPA_Mortor3_IO_L);  
0099:  BCF    20.5
009A:  MOVF   20,W
009B:  BSF    03.5
009C:  MOVWF  07
009D:  BCF    03.5
009E:  BCF    07.5
.................... 	output_low(KAPPA_Mortor3_IO_R);  
009F:  BCF    20.4
00A0:  MOVF   20,W
00A1:  BSF    03.5
00A2:  MOVWF  07
00A3:  BCF    03.5
00A4:  BCF    07.4
.................... 	output_low(KAPPA_Mortor4_IO_L);  
00A5:  BSF    03.5
00A6:  BCF    05.0
00A7:  BCF    03.5
00A8:  BCF    05.0
.................... 	output_low(KAPPA_Mortor4_IO_R);  
00A9:  BSF    03.5
00AA:  BCF    08.1
00AB:  BCF    03.5
00AC:  BCF    08.1
.................... 		//かっぱ巻き2初期化  
.................... 	output_low(KAPPA2_Mortor1_IO_L);  
00AD:  BSF    03.5
00AE:  BCF    08.7
00AF:  BCF    03.5
00B0:  BCF    08.7
.................... 	output_low(KAPPA2_Mortor1_IO_R);  
00B1:  BSF    03.5
00B2:  BCF    08.6
00B3:  BCF    03.5
00B4:  BCF    08.6
.................... 	output_low(KAPPA2_Mortor2_IO_L);  
00B5:  BSF    03.5
00B6:  BCF    06.1
00B7:  BCF    03.5
00B8:  BCF    06.1
.................... 	output_low(KAPPA2_Mortor2_IO_R);  
00B9:  BSF    03.5
00BA:  BCF    06.0
00BB:  BCF    03.5
00BC:  BCF    06.0
.................... 	output_low(KAPPA2_Mortor3_IO_L);  
00BD:  BSF    03.5
00BE:  BCF    06.3
00BF:  BCF    03.5
00C0:  BCF    06.3
.................... 	output_low(KAPPA2_Mortor3_IO_R);  
00C1:  BSF    03.5
00C2:  BCF    06.2
00C3:  BCF    03.5
00C4:  BCF    06.2
.................... 	output_low(KAPPA2_Mortor4_IO_L);  
00C5:  BSF    03.5
00C6:  BCF    06.5
00C7:  BCF    03.5
00C8:  BCF    06.5
.................... 	output_low(KAPPA2_Mortor4_IO_R);  
00C9:  BSF    03.5
00CA:  BCF    06.4
00CB:  BCF    03.5
00CC:  BCF    06.4
.................... 	  
.................... 	//LEDちかちか動作確認  
.................... 	LED_tikatika(500);  
00CD:  MOVLW  01
00CE:  MOVWF  41
00CF:  MOVLW  F4
00D0:  MOVWF  40
00D1:  GOTO   02A
.................... 	  
.................... 	//output_high(TEKKA_LED);   //動作確認  
.................... 	output_high(KAPPA_LED1);   //動作確認  
00D2:  BSF    03.5
00D3:  BCF    08.5
00D4:  BCF    03.5
00D5:  BSF    08.5
.................... 	output_high(KAPPA_LED2);   //動作確認  
00D6:  BSF    03.5
00D7:  BCF    08.4
00D8:  BCF    03.5
00D9:  BSF    08.4
.................... 	output_high(KAPPA2_LED1);   //動作確認  
00DA:  BSF    03.5
00DB:  BCF    06.6
00DC:  BCF    03.5
00DD:  BSF    06.6
.................... 	output_high(KAPPA2_LED2);   //動作確認  
00DE:  BSF    03.5
00DF:  BCF    06.7
00E0:  BCF    03.5
00E1:  BSF    06.7
.................... 	  
.................... 	//delay_ms(30);  
.................... 	while(1)		//アイドルループ  
.................... 	{  
.................... 		while(1)  
.................... 		{	  
.................... 		//スタートデータ待ち  
.................... 			while(cheaker != '@')  
.................... 			{  
00E2:  MOVF   21,W
00E3:  SUBLW  40
00E4:  BTFSC  03.2
00E5:  GOTO   0F1
.................... 				if(kbhit())  
.................... 				{  
00E6:  BTFSS  0C.5
00E7:  GOTO   0F0
.................... 				cheaker = getc();  
00E8:  BTFSS  0C.5
00E9:  GOTO   0E8
00EA:  MOVF   1A,W
00EB:  MOVWF  21
.................... 					putc(cheaker);  
00EC:  MOVF   21,W
00ED:  BTFSS  0C.4
00EE:  GOTO   0ED
00EF:  MOVWF  19
.................... 				}  
.................... 			}  
00F0:  GOTO   0E2
.................... 			//LED_tikatika(500);  
.................... 		//モータの数を確認  
.................... 			motasuu1 = getc();  
00F1:  BTFSS  0C.5
00F2:  GOTO   0F1
00F3:  MOVF   1A,W
00F4:  MOVWF  3D
.................... 			motasuu = motasuu1;  
00F5:  MOVF   3D,W
00F6:  MOVWF  3F
.................... 		//データ受信  
.................... 			for(i=1;motasuu >= i;i++)  
00F7:  MOVLW  01
00F8:  MOVWF  3C
00F9:  MOVF   3C,W
00FA:  SUBWF  3F,W
00FB:  BTFSS  03.0
00FC:  GOTO   10D
.................... 			{  
.................... 				data_H[i] =getc();  
00FD:  MOVLW  22
00FE:  ADDWF  3C,W
00FF:  MOVWF  04
0100:  BTFSS  0C.5
0101:  GOTO   100
0102:  MOVF   1A,W
0103:  MOVWF  00
.................... 				data_L[i] =getc();  
0104:  MOVLW  2C
0105:  ADDWF  3C,W
0106:  MOVWF  04
0107:  BTFSS  0C.5
0108:  GOTO   107
0109:  MOVF   1A,W
010A:  MOVWF  00
.................... 			}  
010B:  INCF   3C,F
010C:  GOTO   0F9
.................... 		//ストップデータ確認  
.................... 			cheaker = getc();  
010D:  BTFSS  0C.5
010E:  GOTO   10D
010F:  MOVF   1A,W
0110:  MOVWF  21
.................... 			  
.................... 			if(cheaker != '*')  
.................... 			{  
0111:  MOVF   21,W
0112:  SUBLW  2A
0113:  BTFSC  03.2
0114:  GOTO   11A
.................... 				putc('N');  
0115:  MOVLW  4E
0116:  BTFSS  0C.4
0117:  GOTO   116
0118:  MOVWF  19
.................... 				break;  
0119:  GOTO   322
.................... 			}  
.................... 			  
.................... 		//データ復号  
.................... 			for(i=1;motasuu >= i;i++)  
011A:  MOVLW  01
011B:  MOVWF  3C
011C:  MOVF   3C,W
011D:  SUBWF  3F,W
011E:  BTFSS  03.0
011F:  GOTO   317
.................... 				{  
.................... 					//IDの取り出し  
.................... 					ID = data_H[i] & 0b11111000;  
0120:  MOVLW  22
0121:  ADDWF  3C,W
0122:  MOVWF  04
0123:  MOVF   00,W
0124:  ANDLW  F8
0125:  MOVWF  3A
.................... 					ID = ID>>3;  
0126:  RRF    3A,F
0127:  RRF    3A,F
0128:  RRF    3A,F
0129:  MOVLW  1F
012A:  ANDWF  3A,F
.................... 					//符号取り出し  
.................... 					hugou = data_H[i] & 0b0000100;  
012B:  MOVLW  22
012C:  ADDWF  3C,W
012D:  MOVWF  04
012E:  MOVF   00,W
012F:  ANDLW  04
0130:  MOVWF  3B
.................... 					hugou = hugou>>2;  
0131:  RRF    3B,F
0132:  RRF    3B,F
0133:  MOVLW  3F
0134:  ANDWF  3B,F
.................... 					//PWMデータ取り出し  
.................... 					F = data_H[i] & 0b0000011;		//PWM上位2bit取り出し  
0135:  MOVLW  22
0136:  ADDWF  3C,W
0137:  MOVWF  04
0138:  MOVF   00,W
0139:  ANDLW  03
013A:  MOVWF  38
013B:  CLRF   39
.................... 					F = F<<8;						//PWMデータを8ビット左にシフト  
013C:  MOVF   38,W
013D:  MOVWF  39
013E:  CLRF   38
.................... 					E = data_L[i];					  
013F:  MOVLW  2C
0140:  ADDWF  3C,W
0141:  MOVWF  04
0142:  MOVF   00,W
0143:  CLRF   7A
0144:  MOVWF  36
0145:  MOVF   7A,W
0146:  MOVWF  37
.................... 					F = F | E;						//PWMのデータの上位と下位をORする(FにPWM用のデータがはいってる)  
0147:  MOVF   36,W
0148:  IORWF  38,F
0149:  MOVF   37,W
014A:  IORWF  39,F
.................... 					  
.................... 					//受信データ初期化  
.................... 					data_H[i]=0;  
014B:  MOVLW  22
014C:  ADDWF  3C,W
014D:  MOVWF  04
014E:  CLRF   00
.................... 					data_L[i]=0;  
014F:  MOVLW  2C
0150:  ADDWF  3C,W
0151:  MOVWF  04
0152:  CLRF   00
.................... 					  
.................... 					  
.................... 					/*  
.................... 					//PWMデータ判別  
.................... 					if(F <=370 && F != 0)			//ストップではなく、PWMが370以下のとき  
.................... 					{  
.................... 						printf("6\n\r");  
.................... 						//printf("\n\r Less PWM data \n\r");  
.................... 						F = 420;  
.................... 					}  
.................... 					*/  
.................... 					  
.................... 					  
.................... 					//printf("\n\r switching \n\r");  
.................... 				//データ実行  
.................... 					switch (ID)						//モーター判別  
.................... 					{  
0153:  MOVF   3A,W
0154:  MOVWF  77
0155:  MOVLW  01
0156:  SUBWF  77,W
0157:  BTFSC  03.2
0158:  GOTO   176
0159:  MOVLW  02
015A:  SUBWF  77,W
015B:  BTFSC  03.2
015C:  GOTO   1AD
015D:  MOVLW  03
015E:  SUBWF  77,W
015F:  BTFSC  03.2
0160:  GOTO   1DE
0161:  MOVLW  04
0162:  SUBWF  77,W
0163:  BTFSC  03.2
0164:  GOTO   21B
0165:  MOVLW  05
0166:  SUBWF  77,W
0167:  BTFSC  03.2
0168:  GOTO   24C
0169:  MOVLW  06
016A:  SUBWF  77,W
016B:  BTFSC  03.2
016C:  GOTO   27D
016D:  MOVLW  07
016E:  SUBWF  77,W
016F:  BTFSC  03.2
0170:  GOTO   2AE
0171:  MOVLW  08
0172:  SUBWF  77,W
0173:  BTFSC  03.2
0174:  GOTO   2DF
0175:  GOTO   310
.................... 						case 0x01:					//かっぱモーター１  
.................... 								if(F)						//モーターが動かす時  
.................... 								{  
0176:  MOVF   38,W
0177:  IORWF  39,W
0178:  BTFSC  03.2
0179:  GOTO   19E
.................... 									  
.................... 									if(hugou)  
.................... 									{  
017A:  MOVF   3B,F
017B:  BTFSC  03.2
017C:  GOTO   18C
.................... 										putc('1');  
017D:  MOVLW  31
017E:  BTFSS  0C.4
017F:  GOTO   17E
0180:  MOVWF  19
.................... 										output_high(KAPPA_Mortor1_IO_R);  
0181:  BSF    03.5
0182:  BCF    08.0
0183:  BCF    03.5
0184:  BSF    08.0
.................... 										output_low(KAPPA_Mortor1_IO_L);  
0185:  BCF    20.3
0186:  MOVF   20,W
0187:  BSF    03.5
0188:  MOVWF  07
0189:  BCF    03.5
018A:  BCF    07.3
.................... 										  
.................... 									}else if(!hugou)  
018B:  GOTO   19D
.................... 									{  
018C:  MOVF   3B,F
018D:  BTFSS  03.2
018E:  GOTO   19D
.................... 										putc('2');  
018F:  MOVLW  32
0190:  BTFSS  0C.4
0191:  GOTO   190
0192:  MOVWF  19
.................... 										output_high(KAPPA_Mortor1_IO_L);  
0193:  BCF    20.3
0194:  MOVF   20,W
0195:  BSF    03.5
0196:  MOVWF  07
0197:  BCF    03.5
0198:  BSF    07.3
.................... 										output_low(KAPPA_Mortor1_IO_R);  
0199:  BSF    03.5
019A:  BCF    08.0
019B:  BCF    03.5
019C:  BCF    08.0
.................... 										  
.................... 									}  
.................... 								}else						//モーターを動かさないとき  
.................... 								{  
019D:  GOTO   1AC
.................... 										putc('3');  
019E:  MOVLW  33
019F:  BTFSS  0C.4
01A0:  GOTO   19F
01A1:  MOVWF  19
.................... 										output_low(KAPPA_Mortor1_IO_L);  
01A2:  BCF    20.3
01A3:  MOVF   20,W
01A4:  BSF    03.5
01A5:  MOVWF  07
01A6:  BCF    03.5
01A7:  BCF    07.3
.................... 										output_low(KAPPA_Mortor1_IO_R);  
01A8:  BSF    03.5
01A9:  BCF    08.0
01AA:  BCF    03.5
01AB:  BCF    08.0
.................... 									  
.................... 								}  
.................... 							break;  
01AC:  GOTO   315
.................... 						case 0x02:					//かっぱモーター２  
.................... 								if(F)						//モーターが動かす時  
.................... 								{  
01AD:  MOVF   38,W
01AE:  IORWF  39,W
01AF:  BTFSC  03.2
01B0:  GOTO   1D1
.................... 									if(hugou)  
.................... 									{  
01B1:  MOVF   3B,F
01B2:  BTFSC  03.2
01B3:  GOTO   1C1
.................... 										putc('4');  
01B4:  MOVLW  34
01B5:  BTFSS  0C.4
01B6:  GOTO   1B5
01B7:  MOVWF  19
.................... 										output_high(KAPPA_Mortor2_IO_R);  
01B8:  BSF    03.5
01B9:  BCF    08.2
01BA:  BCF    03.5
01BB:  BSF    08.2
.................... 										output_low(KAPPA_Mortor2_IO_L);  
01BC:  BSF    03.5
01BD:  BCF    08.3
01BE:  BCF    03.5
01BF:  BCF    08.3
.................... 										  
.................... 									}else if(!hugou)  
01C0:  GOTO   1D0
.................... 									{  
01C1:  MOVF   3B,F
01C2:  BTFSS  03.2
01C3:  GOTO   1D0
.................... 										putc('5');  
01C4:  MOVLW  35
01C5:  BTFSS  0C.4
01C6:  GOTO   1C5
01C7:  MOVWF  19
.................... 										output_high(KAPPA_Mortor2_IO_L);  
01C8:  BSF    03.5
01C9:  BCF    08.3
01CA:  BCF    03.5
01CB:  BSF    08.3
.................... 										output_low(KAPPA_Mortor2_IO_R);  
01CC:  BSF    03.5
01CD:  BCF    08.2
01CE:  BCF    03.5
01CF:  BCF    08.2
.................... 										  
.................... 									}  
.................... 								}else						//モーターを動かさないとき  
.................... 								{  
01D0:  GOTO   1DD
.................... 										putc('6');  
01D1:  MOVLW  36
01D2:  BTFSS  0C.4
01D3:  GOTO   1D2
01D4:  MOVWF  19
.................... 										output_low(KAPPA_Mortor2_IO_L);  
01D5:  BSF    03.5
01D6:  BCF    08.3
01D7:  BCF    03.5
01D8:  BCF    08.3
.................... 										output_low(KAPPA_Mortor2_IO_R);  
01D9:  BSF    03.5
01DA:  BCF    08.2
01DB:  BCF    03.5
01DC:  BCF    08.2
.................... 									  
.................... 								}  
.................... 							break;  
01DD:  GOTO   315
.................... 						case 0x03:					//かっぱモーター３  
.................... 								if(F)						//モーターが動かす時  
.................... 								{  
01DE:  MOVF   38,W
01DF:  IORWF  39,W
01E0:  BTFSC  03.2
01E1:  GOTO   20A
.................... 									if(hugou)  
.................... 									{  
01E2:  MOVF   3B,F
01E3:  BTFSC  03.2
01E4:  GOTO   1F6
.................... 										putc('7');  
01E5:  MOVLW  37
01E6:  BTFSS  0C.4
01E7:  GOTO   1E6
01E8:  MOVWF  19
.................... 										output_high(KAPPA_Mortor3_IO_R);  
01E9:  BCF    20.4
01EA:  MOVF   20,W
01EB:  BSF    03.5
01EC:  MOVWF  07
01ED:  BCF    03.5
01EE:  BSF    07.4
.................... 										output_low(KAPPA_Mortor3_IO_L);  
01EF:  BCF    20.5
01F0:  MOVF   20,W
01F1:  BSF    03.5
01F2:  MOVWF  07
01F3:  BCF    03.5
01F4:  BCF    07.5
.................... 										  
.................... 									}else if(!hugou)  
01F5:  GOTO   209
.................... 									{  
01F6:  MOVF   3B,F
01F7:  BTFSS  03.2
01F8:  GOTO   209
.................... 										putc('8');  
01F9:  MOVLW  38
01FA:  BTFSS  0C.4
01FB:  GOTO   1FA
01FC:  MOVWF  19
.................... 										output_high(KAPPA_Mortor3_IO_L);  
01FD:  BCF    20.5
01FE:  MOVF   20,W
01FF:  BSF    03.5
0200:  MOVWF  07
0201:  BCF    03.5
0202:  BSF    07.5
.................... 										output_low(KAPPA_Mortor3_IO_R);  
0203:  BCF    20.4
0204:  MOVF   20,W
0205:  BSF    03.5
0206:  MOVWF  07
0207:  BCF    03.5
0208:  BCF    07.4
.................... 										  
.................... 									}  
.................... 								}else						//モーターを動かさないとき  
.................... 								{  
0209:  GOTO   21A
.................... 										putc('9');  
020A:  MOVLW  39
020B:  BTFSS  0C.4
020C:  GOTO   20B
020D:  MOVWF  19
.................... 										output_low(KAPPA_Mortor3_IO_L);  
020E:  BCF    20.5
020F:  MOVF   20,W
0210:  BSF    03.5
0211:  MOVWF  07
0212:  BCF    03.5
0213:  BCF    07.5
.................... 										output_low(KAPPA_Mortor3_IO_R);  
0214:  BCF    20.4
0215:  MOVF   20,W
0216:  BSF    03.5
0217:  MOVWF  07
0218:  BCF    03.5
0219:  BCF    07.4
.................... 									  
.................... 								}  
.................... 							break;  
021A:  GOTO   315
.................... 						case 0x04:					//かっぱモーター４  
.................... 								if(F)						//モーターが動かす時  
.................... 								{  
021B:  MOVF   38,W
021C:  IORWF  39,W
021D:  BTFSC  03.2
021E:  GOTO   23F
.................... 									if(hugou)  
.................... 									{  
021F:  MOVF   3B,F
0220:  BTFSC  03.2
0221:  GOTO   22F
.................... 										putc('a');  
0222:  MOVLW  61
0223:  BTFSS  0C.4
0224:  GOTO   223
0225:  MOVWF  19
.................... 										output_high(KAPPA_Mortor4_IO_R);  
0226:  BSF    03.5
0227:  BCF    08.1
0228:  BCF    03.5
0229:  BSF    08.1
.................... 										output_low(KAPPA_Mortor4_IO_L);  
022A:  BSF    03.5
022B:  BCF    05.0
022C:  BCF    03.5
022D:  BCF    05.0
.................... 										  
.................... 									}else if(!hugou)  
022E:  GOTO   23E
.................... 									{  
022F:  MOVF   3B,F
0230:  BTFSS  03.2
0231:  GOTO   23E
.................... 										putc('b');  
0232:  MOVLW  62
0233:  BTFSS  0C.4
0234:  GOTO   233
0235:  MOVWF  19
.................... 										output_high(KAPPA_Mortor4_IO_L);  
0236:  BSF    03.5
0237:  BCF    05.0
0238:  BCF    03.5
0239:  BSF    05.0
.................... 										output_low(KAPPA_Mortor4_IO_R);  
023A:  BSF    03.5
023B:  BCF    08.1
023C:  BCF    03.5
023D:  BCF    08.1
.................... 										  
.................... 									}  
.................... 								}else						//モーターを動かさないとき  
.................... 								{  
023E:  GOTO   24B
.................... 										putc('c');  
023F:  MOVLW  63
0240:  BTFSS  0C.4
0241:  GOTO   240
0242:  MOVWF  19
.................... 										output_low(KAPPA_Mortor4_IO_L);  
0243:  BSF    03.5
0244:  BCF    05.0
0245:  BCF    03.5
0246:  BCF    05.0
.................... 										output_low(KAPPA_Mortor4_IO_R);  
0247:  BSF    03.5
0248:  BCF    08.1
0249:  BCF    03.5
024A:  BCF    08.1
.................... 									  
.................... 								}  
.................... 							break;  
024B:  GOTO   315
.................... 						  
.................... 						//ここからかっぱポート2番目  
.................... 						case 0x05:					//かっぱモーター5  
.................... 								if(F)						//モーターが動かす時  
.................... 								{  
024C:  MOVF   38,W
024D:  IORWF  39,W
024E:  BTFSC  03.2
024F:  GOTO   270
.................... 									if(hugou)  
.................... 									{  
0250:  MOVF   3B,F
0251:  BTFSC  03.2
0252:  GOTO   260
.................... 										putc('d');  
0253:  MOVLW  64
0254:  BTFSS  0C.4
0255:  GOTO   254
0256:  MOVWF  19
.................... 										output_high(KAPPA2_Mortor1_IO_R);  
0257:  BSF    03.5
0258:  BCF    08.6
0259:  BCF    03.5
025A:  BSF    08.6
.................... 										output_low(KAPPA2_Mortor1_IO_L);  
025B:  BSF    03.5
025C:  BCF    08.7
025D:  BCF    03.5
025E:  BCF    08.7
.................... 										  
.................... 									}else if(!hugou)  
025F:  GOTO   26F
.................... 									{  
0260:  MOVF   3B,F
0261:  BTFSS  03.2
0262:  GOTO   26F
.................... 										putc('e');  
0263:  MOVLW  65
0264:  BTFSS  0C.4
0265:  GOTO   264
0266:  MOVWF  19
.................... 										output_high(KAPPA2_Mortor1_IO_L);  
0267:  BSF    03.5
0268:  BCF    08.7
0269:  BCF    03.5
026A:  BSF    08.7
.................... 										output_low(KAPPA2_Mortor1_IO_R);  
026B:  BSF    03.5
026C:  BCF    08.6
026D:  BCF    03.5
026E:  BCF    08.6
.................... 										  
.................... 									}  
.................... 								}else						//モーターを動かさないとき  
.................... 								{  
026F:  GOTO   27C
.................... 										putc('f');  
0270:  MOVLW  66
0271:  BTFSS  0C.4
0272:  GOTO   271
0273:  MOVWF  19
.................... 										output_low(KAPPA2_Mortor1_IO_L);  
0274:  BSF    03.5
0275:  BCF    08.7
0276:  BCF    03.5
0277:  BCF    08.7
.................... 										output_low(KAPPA2_Mortor1_IO_R);  
0278:  BSF    03.5
0279:  BCF    08.6
027A:  BCF    03.5
027B:  BCF    08.6
.................... 									  
.................... 								}  
.................... 							break;  
027C:  GOTO   315
.................... 						  
.................... 						case 0x06:					//かっぱモーター6  
.................... 								if(F)						//モーターが動かす時  
.................... 								{  
027D:  MOVF   38,W
027E:  IORWF  39,W
027F:  BTFSC  03.2
0280:  GOTO   2A1
.................... 									if(hugou)  
.................... 									{  
0281:  MOVF   3B,F
0282:  BTFSC  03.2
0283:  GOTO   291
.................... 										putc('g');  
0284:  MOVLW  67
0285:  BTFSS  0C.4
0286:  GOTO   285
0287:  MOVWF  19
.................... 										output_high(KAPPA2_Mortor2_IO_R);  
0288:  BSF    03.5
0289:  BCF    06.0
028A:  BCF    03.5
028B:  BSF    06.0
.................... 										output_low(KAPPA2_Mortor2_IO_L);  
028C:  BSF    03.5
028D:  BCF    06.1
028E:  BCF    03.5
028F:  BCF    06.1
.................... 										  
.................... 									}else if(!hugou)  
0290:  GOTO   2A0
.................... 									{  
0291:  MOVF   3B,F
0292:  BTFSS  03.2
0293:  GOTO   2A0
.................... 										putc('h');  
0294:  MOVLW  68
0295:  BTFSS  0C.4
0296:  GOTO   295
0297:  MOVWF  19
.................... 										output_high(KAPPA2_Mortor2_IO_L);  
0298:  BSF    03.5
0299:  BCF    06.1
029A:  BCF    03.5
029B:  BSF    06.1
.................... 										output_low(KAPPA2_Mortor2_IO_R);  
029C:  BSF    03.5
029D:  BCF    06.0
029E:  BCF    03.5
029F:  BCF    06.0
.................... 										  
.................... 									}  
.................... 								}else						//モーターを動かさないとき  
.................... 								{  
02A0:  GOTO   2AD
.................... 										putc('i');  
02A1:  MOVLW  69
02A2:  BTFSS  0C.4
02A3:  GOTO   2A2
02A4:  MOVWF  19
.................... 										output_low(KAPPA2_Mortor2_IO_L);  
02A5:  BSF    03.5
02A6:  BCF    06.1
02A7:  BCF    03.5
02A8:  BCF    06.1
.................... 										output_low(KAPPA2_Mortor2_IO_R);  
02A9:  BSF    03.5
02AA:  BCF    06.0
02AB:  BCF    03.5
02AC:  BCF    06.0
.................... 									  
.................... 								}  
.................... 							break;  
02AD:  GOTO   315
.................... 						  
.................... 						case 0x07:					//かっぱモーター7  
.................... 								if(F)						//モーターが動かす時  
.................... 								{  
02AE:  MOVF   38,W
02AF:  IORWF  39,W
02B0:  BTFSC  03.2
02B1:  GOTO   2D2
.................... 									if(hugou)  
.................... 									{  
02B2:  MOVF   3B,F
02B3:  BTFSC  03.2
02B4:  GOTO   2C2
.................... 										putc('j');  
02B5:  MOVLW  6A
02B6:  BTFSS  0C.4
02B7:  GOTO   2B6
02B8:  MOVWF  19
.................... 										output_high(KAPPA2_Mortor3_IO_R);  
02B9:  BSF    03.5
02BA:  BCF    06.2
02BB:  BCF    03.5
02BC:  BSF    06.2
.................... 										output_low(KAPPA2_Mortor3_IO_L);  
02BD:  BSF    03.5
02BE:  BCF    06.3
02BF:  BCF    03.5
02C0:  BCF    06.3
.................... 										  
.................... 									}else if(!hugou)  
02C1:  GOTO   2D1
.................... 									{  
02C2:  MOVF   3B,F
02C3:  BTFSS  03.2
02C4:  GOTO   2D1
.................... 										putc('k');  
02C5:  MOVLW  6B
02C6:  BTFSS  0C.4
02C7:  GOTO   2C6
02C8:  MOVWF  19
.................... 										output_high(KAPPA2_Mortor3_IO_L);  
02C9:  BSF    03.5
02CA:  BCF    06.3
02CB:  BCF    03.5
02CC:  BSF    06.3
.................... 										output_low(KAPPA2_Mortor3_IO_R);  
02CD:  BSF    03.5
02CE:  BCF    06.2
02CF:  BCF    03.5
02D0:  BCF    06.2
.................... 										  
.................... 									}  
.................... 								}else						//モーターを動かさないとき  
.................... 								{  
02D1:  GOTO   2DE
.................... 										putc('l');  
02D2:  MOVLW  6C
02D3:  BTFSS  0C.4
02D4:  GOTO   2D3
02D5:  MOVWF  19
.................... 										output_low(KAPPA2_Mortor3_IO_L);  
02D6:  BSF    03.5
02D7:  BCF    06.3
02D8:  BCF    03.5
02D9:  BCF    06.3
.................... 										output_low(KAPPA2_Mortor3_IO_R);  
02DA:  BSF    03.5
02DB:  BCF    06.2
02DC:  BCF    03.5
02DD:  BCF    06.2
.................... 									  
.................... 								}  
.................... 							break;  
02DE:  GOTO   315
.................... 						  
.................... 						case 0x08:					//かっぱモーター8  
.................... 								if(F)						//モーターが動かす時  
.................... 								{  
02DF:  MOVF   38,W
02E0:  IORWF  39,W
02E1:  BTFSC  03.2
02E2:  GOTO   303
.................... 									if(hugou)  
.................... 									{  
02E3:  MOVF   3B,F
02E4:  BTFSC  03.2
02E5:  GOTO   2F3
.................... 										putc('m');  
02E6:  MOVLW  6D
02E7:  BTFSS  0C.4
02E8:  GOTO   2E7
02E9:  MOVWF  19
.................... 										output_high(KAPPA2_Mortor4_IO_R);  
02EA:  BSF    03.5
02EB:  BCF    06.4
02EC:  BCF    03.5
02ED:  BSF    06.4
.................... 										output_low(KAPPA2_Mortor4_IO_L);  
02EE:  BSF    03.5
02EF:  BCF    06.5
02F0:  BCF    03.5
02F1:  BCF    06.5
.................... 										  
.................... 									}else if(!hugou)  
02F2:  GOTO   302
.................... 									{  
02F3:  MOVF   3B,F
02F4:  BTFSS  03.2
02F5:  GOTO   302
.................... 										putc('n');  
02F6:  MOVLW  6E
02F7:  BTFSS  0C.4
02F8:  GOTO   2F7
02F9:  MOVWF  19
.................... 										output_high(KAPPA2_Mortor4_IO_L);  
02FA:  BSF    03.5
02FB:  BCF    06.5
02FC:  BCF    03.5
02FD:  BSF    06.5
.................... 										output_low(KAPPA2_Mortor4_IO_R);  
02FE:  BSF    03.5
02FF:  BCF    06.4
0300:  BCF    03.5
0301:  BCF    06.4
.................... 										  
.................... 									}  
.................... 								}else						//モーターを動かさないとき  
.................... 								{  
0302:  GOTO   30F
.................... 										putc('o');  
0303:  MOVLW  6F
0304:  BTFSS  0C.4
0305:  GOTO   304
0306:  MOVWF  19
.................... 										output_low(KAPPA2_Mortor4_IO_L);  
0307:  BSF    03.5
0308:  BCF    06.5
0309:  BCF    03.5
030A:  BCF    06.5
.................... 										output_low(KAPPA2_Mortor4_IO_R);  
030B:  BSF    03.5
030C:  BCF    06.4
030D:  BCF    03.5
030E:  BCF    06.4
.................... 									  
.................... 								}  
.................... 							break;  
030F:  GOTO   315
.................... 						  
.................... 						  
.................... 						  
.................... 						  
.................... 						default:					putc('D');  
0310:  MOVLW  44
0311:  BTFSS  0C.4
0312:  GOTO   311
0313:  MOVWF  19
.................... 							break;  
0314:  GOTO   315
.................... 					  
.................... 					}  
.................... 					  
.................... 				}	//for文抜け出し  
0315:  INCF   3C,F
0316:  GOTO   11C
.................... 			  
.................... 			  
.................... 		//変数初期化  
.................... 		//	printf("\n\r format of data \n\r");  
.................... 			cheaker=0;  
0317:  CLRF   21
.................... 			motasuu=0;  
0318:  CLRF   3F
.................... 			motasuu1=0;  
0319:  CLRF   3D
.................... 			 E=0;  
031A:  CLRF   37
031B:  CLRF   36
.................... 			F=0;  
031C:  CLRF   39
031D:  CLRF   38
.................... 			ID=0;  
031E:  CLRF   3A
.................... 			hugou=0;  
031F:  CLRF   3B
.................... 			i=0;  
0320:  CLRF   3C
.................... 			  
.................... 		}  
0321:  GOTO   0E2
.................... 		//printf("\n\r End of one communication \n\r");  
.................... 		putc('F');			//正常終了した場合実行されない  
0322:  MOVLW  46
0323:  BTFSS  0C.4
0324:  GOTO   323
0325:  MOVWF  19
.................... 	}		//アイドルループ終了  
0326:  GOTO   0E2
.................... 	  
.................... 	printf("\n\r End main \n\r");  
0327:  CLRF   40
0328:  MOVF   40,W
0329:  CALL   004
032A:  INCF   40,F
032B:  MOVWF  77
032C:  MOVF   77,W
032D:  BTFSS  0C.4
032E:  GOTO   32D
032F:  MOVWF  19
0330:  MOVLW  0E
0331:  SUBWF  40,W
0332:  BTFSS  03.2
0333:  GOTO   328
.................... 	return(0);  
0334:  MOVLW  00
0335:  MOVWF  78
.................... }  
....................   
.................... /*参考	getcについて  
.................... 機能: RS-232C RCV ピンから文字を読み込み、文字を返します。  
.................... この関数は文字入力が有るまで待ち続けます。この状態を避けたい場合は、この関数の使用直前で  
.................... 関数kbhit()を使って文字入力可能か否かのテストをして下さい。  
.................... もし、内蔵USART 機能があれば、ハードウエアは３文字をバッファすることが出来ます。  
.................... 無ければ、PIC によって文字が受信されている間、文字の取りこぼしを無くす為、GETC で取り込  
.................... みを継続する必要があります。fgetc()使用時は、指定されたストリームからの入力をします。  
.................... getc()のデフォルト・ストリームはSTDIN です。若しくは、プログラム的にこれ以前で使用された、  
.................... ストリームが指定されたと見なして処理します。  
.................... */  
....................   
....................   
....................  
0336:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
